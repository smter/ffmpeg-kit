name: android build scripts

on:
  push:
    branches:
      - development
      - main
    paths:
      - '.github/workflows/android-build-scripts.yml'
      - 'android/**'
      - '!android/README.md'
      - 'scripts/**'
      - 'tools/**'
      - 'android.sh'
  pull_request:
    branches:
      - development
      - main
    paths:
      - '.github/workflows/android-build-scripts.yml'
      - 'android/**'
      - '!android/README.md'
      - 'scripts/**'
      - 'tools/**'
      - 'android.sh'

jobs:
  build-main-on-linux:
    name: android main on linux
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        ndk-version: [ 'r24-linux' ]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: set up adopt jdk 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
      - name: prerequisites
        run: ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --uninstall "cmake;3.10.2.4988404" "cmake;3.18.1"
      - name: set up android ndk
        run: |
          curl -s "https://dl.google.com/android/repository/android-ndk-${{ matrix.ndk-version }}.zip" -o ndk.zip
          unzip -q -o ndk.zip -d .ndk
          echo "ANDROID_NDK_ROOT=$PWD/.ndk/$(ls .ndk)" >> $GITHUB_ENV
      - name: Install libaom
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build yasm
          git clone --depth 1 https://aomedia.googlesource.com/aom
          mkdir aom_build
          cd aom_build
          cmake ../aom -G Ninja -DCMAKE_BUILD_TYPE=Release -DENABLE_DOCS=0 -DENABLE_TESTS=0 -DENABLE_EXAMPLES=0 -DENABLE_TOOLS=0
          ninja
          sudo ninja install
      - name: run the build script
        run: ./android.sh -d --enable-android-media-codec --enable-android-zlib --disable-arm-v7a --enable-libaom --disable-neon --enable-asm --enable-inline-asm  --disable-autodetect --enable-cross-compile --enable-pic --enable-jni --enable-optimizations --enable-swscale --disable-static --enable-shared --enable-pthreads --enable-v4l2-m2m --disable-outdev=fbdev --disable-indev=fbdev --enable-small --disable-xmm-clobber-test --disable-debug --enable-lto --disable-neon-clobber-test --disable-programs --disable-postproc --disable-doc --disable-htmlpages --disable-manpages --disable-podpages --disable-txtpages --disable-sndio --disable-schannel --disable-securetransport --disable-xlib --disable-cuda --disable-cuvid --disable-nvenc --disable-vaapi --disable-vdpau --disable-videotoolbox --disable-audiotoolbox --disable-appkit --disable-alsa --disable-cuda --disable-cuvid --disable-nvenc --disable-vaapi --disable-vdpau --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-gmp --enable-gnutls --enable-libmp3lame --enable-libass --enable-iconv --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libxml2 --enable-libopencore-amrnb --enable-libshine --enable-libspeex --enable-libdav1d --enable-libkvazaar --enable-libilbc --enable-libopus --enable-libsnappy --enable-libsoxr --enable-libtwolame --disable-sdl2 --enable-libvo-amrwbenc --enable-libzimg --disable-openssl --enable-zlib --enable-mediacodec
      - name: print build logs
        if: ${{ always() }}
        run: cat build.log
      - name: print ffbuild logs
        if: ${{ failure() }}
        run: '[[ -f ./src/ffmpeg/ffbuild/config.log ]] && tail -50 ./src/ffmpeg/ffbuild/config.log'
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            build.log
            android/libs
            android/obj
            prebuilt/*/ffmpeg-kit/ffmpeg-kit.aar
            android/ffmpeg-kit-android-lib/src/main/res/raw
            android
